name: Deploy website
on:
  push:
    branches:
      - main
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Cache dependencies #agregamos un step para el cache dependencie
        uses: actions/cache@v3 #agregamos el action para ello
        with: #con el with, agregamos la configuracion de la ruta
          path: ~/.npm #este puede variar acorde al lenguaje usado, en este caso es JS, por ello es npm, y ella es la ruta para ver dicha version
          key: deps-node-modules-${{ hasFiles('**/package-lock.json') }} #al final, agregamos la ruta donde se almacenan las versiones
      - name: Install dependencies
        run: npm ci
      - name: Lint code
        run: npm run lint
      - name: Test code
        run: npm run test
  build:
    needs: test
    runs-on: ubuntu-latest
    outputs: #para agregar el identificador del output que sera usado en demas Jobs, se "declara a este nivel, al nivel de la VM"
      script-file: ${{ steps.publish.outputs.script-file }} #Se pueden crear los outputs que querramos, no hay un numero definido para poder crear, y se le puede poner el nombre que querramos
      #Una vez agregamos el context, agregamos el Steps, para referirse que sera al Step, y posteriormente agregamos el id del step al que nos queremos referir, por medio del punto, posteriormente referenciamos que es un output, y para rematar ponemos el nombre que le asignamos a la "variable" en donde se asigna
    steps:
      - name: Get code
        uses: actions/checkout@v3
      - name: Install dependencies
        run: npm ci
      - name: Build website
        run: npm run build
      - name: Publish JS filename  #Es un ejemplo de job outputs, en este caso buscamos encontrar el valor producido anteriormente en la carpeta dist, el nombre del archivo JS
        id: publish #para poder accesar desde scrpit-files a este output value, se le tiene si o si agregar el ID, el nombre puede ser el que sea
        run: find dist/assets/*.js -type f -execdir echo 'script-file={}' >>$GITHUB_OUTPUT ';' #Este es un comando de linux, el cual busca en la carpeta anidada todos los archivos J, y los muestra con el comando "Echo". Una vez agregamos el identificador, agregamos el nomnbre que querramos a la salida, en donde esta '{}', puede ser diferente al definido anteriormente, ya que es el nombre de este paso, no de todo el "identificador", despues del nombre local, ponemos "=", para definir que esa variable tendra ese valor, es como pasar un pipe de un valor a otro, y dicha variable es la que podra se accesada desde cualquier Job, en este caso es igual al resultado de busqueda del archivo por el "{}". Y al final se le agrega >> $GITHUB_OUTPUT, para referir que dicha variable apunta a un "archivo" especial para github en donde se ponen y se almacenan todas las variables "globales", que se usaran en el entorno que se trabaje
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist-files
          path: |
            dist
            package.json
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Deploy
        run: echo "Deploying..."
      - name: Output filename
        run: echo "${{ needs.build.outputs.script-file }}" #se pone el object context "needs", para obtener la info de otros jobs
        #Necesita el needs, ya que este job depende de build, posteriormente el output, ya que es un job output, y finaliza con el nombre de la "variable"
